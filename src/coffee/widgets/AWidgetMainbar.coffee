# Main navigation bar widget
#
# @depend AWidget.coffee
class AWidgetMainbar extends AWidget

  # Set to true upon instantiation, prevents more than one instance
  @__exists: false

  # Template used to render the menu
  _templateSrc: ""  # Template source
  _template: null   # Compiled template generated by handlebars

  # Items on the menu, accessors are used to manipulate the array
  # After updating, call @render() to re-draw the menu
  _items: []

  # Used to give items unique ids, incremented internally when used
  _nextID: 0

  # Creates a new menu bar if one does not already exist
  #
  # @param [String] parent parent element selector
  constructor: (parent) ->

    if AWidgetMainbar.__exists == true
      AUtilLog.warn "A mainbar already exists, refusing to continue!"
      return

    AWidgetMainbar.__exists = true

    param.required parent
    super "amainbar", parent, [ "awidgetmainbar" ]

    # Create our template
    @_templateSrc =  "<span class=\"logo\">Adefy</span><ul>"
    @_templateSrc += "{{#each items}}"
    @_templateSrc += "<a data-id=\"{{this.id}}\" href=\"{{this.href}}\">"
    @_templateSrc += "<li>{{this.label}}</li>"
    @_templateSrc += "</a>"
    @_templateSrc += "{{/each}}"
    @_templateSrc += "</ul>"
    @_template = Handlebars.compile @_templateSrc

    # Note that we don't render initially. This gives the engine the freedom
    # to set up initial items, and then render us appropriatly

  # Adds a menu item, id is set using an internal counter if not otherwise
  # specified. Note that this function does not call render()!
  #
  # @param [String] label text that appears as the item
  # @param [String] link href content, defaults to #
  # @param [String,Number] id optional, set using an internal counter
  # @return [String,Number] id use this to manipulate the object
  addItem: (label, link, id) ->

    param.required label
    link = param.optional link, "#"
    id = param.optional @_nextID++

    # Ensure id is unique
    for i in @_items
      if i.id == id
        AUtilLog.warn "id in use, overriding supplied id"
        id = @_nextID++

    @_items.push
      label: label
      href: link
      id: id

    id

  # Removes an item using an id, returns false if the item is not found
  #
  # @param [String,Number] id
  # @return [Boolean] success false if item is not found
  removeItem: (id) ->

    for i in [0...@_items.length]
      if @_items[i].id == id
        @_items.splice i, 1
        return true

    false

  # Renders the menu
  render: -> $(@sel).html @_template { items: @_items }

# Mainbar item class
#
# The item can be in one of three states
#  - Primary    [On the mainbar itself]
#  - Secondary  [Item in a mainbar dropdown]
#  - Detail     [Item in a sub-menu to the dropdown]
class AWidgetMainbarItem

  # @property [String] label text that appears as the item
  label: null

  # @property [String] href link url
  href: null

  # @property [String,Number] id unique id set by the mainbar
  id: undefined

  # Role is used internally, either Primary, Secondary or Detail
  _role: undefined

  # Creates item, does not render it!
  #
  # @param [String,Number] id unique id
  # @param [String] role role is either 'primary', 'secondary', or 'detail'
  # @param [String] label text to appear as the item
  # @param [String] href url the item points to
  constructor: (@id, @role, label, href) ->

    param.required @id
    param.required @role, [ "primary", "secondary", "detail" ]

    label = param.optional label, ""
    href = param.optional href, "#"

  render: ->
